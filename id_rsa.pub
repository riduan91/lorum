import datetime as dt
import time


def should_run_job(now: dt.datetime, remote_flag: str) -> bool | None:
    """
    Decide whether to run the job based on current schedule time and remote flag.

    Returns
    -------
    bool | None
        True  → execute tasks
        False → stop job without doing anything
        None  → retry later
    """
    # Parse remote flag
    flag_time = dt.datetime.strptime(remote_flag, "%Y%m%d%H%M%S")

    # Define cutoffs
    day_cutoff = now.replace(hour=11, minute=30, second=0, microsecond=0)
    night_cutoff = now.replace(hour=17, minute=30, second=0, microsecond=0)
    stop_time = now.replace(hour=17, minute=0, second=0, microsecond=0)

    # --- Daytime run: between 12h and 18h ---
    if 12 <= now.hour < 18:
        if flag_time.date() == now.date() and flag_time >= day_cutoff:
            return True
        elif now < stop_time:
            return None
        else:
            return False

    # --- Nighttime run: between 18h and 10h next day ---
    else:
        valid = False
        # Case 1: same day flag after 17h30
        if flag_time.date() == now.date() and flag_time >= night_cutoff:
            valid = True
        # Case 2: previous day flag after 17h30 (only valid if before 10h next day)
        elif (
            now.hour < 10
            and flag_time.date() == (now - dt.timedelta(days=1)).date()
            and flag_time.hour * 60 + flag_time.minute >= 17 * 60 + 30
        ):
            valid = True

        if valid:
            return True
        elif now < stop_time:
            return None
        else:
            return False


def run_job_with_retries(remote_flag_fetcher, max_retries=20, sleep_seconds=300):
    """
    Run job X with retries logic.
    """
    for attempt in range(max_retries):
        now = dt.datetime.now()
        remote_flag = remote_flag_fetcher()
        decision = should_run_job(now, remote_flag)

        if decision is True:
            print("✅ Conditions met, running tasks...")
            # call your real tasks here
            return
        elif decision is False:
            print("⏹ Stop: dependency not ready before cutoff.")
            return
        else:
            print(f"🔄 Retry {attempt+1}/{max_retries}, waiting...")
            time.sleep(sleep_seconds)

    print("⚠️ Max retries reached, finishing job without doing anything.")
