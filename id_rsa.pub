import gc
import numpy as np
import pandas as pd

@monitor_mem()
def update_data_constituents(path_constituents: str, path_data_instruments: str):
    logger.log.info("Update data constituents (vectorized, no set_index).")

    # Load
    dfc = load_parquet(path_constituents).copy()
    dfi = load_parquet(path_data_instruments)[
        ["strInstAladdin", "numInstID", "numInstTypeId", "strInstName",
         "strInstCurrCode", "strInstISINCode"]
    ].copy()

    # Ensure nullable ints for safe masked assignment
    if dfc["numInstId"].dtype.kind in ("i", "u"):
        dfc["numInstId"] = dfc["numInstId"].astype("Int64")

    # -------------------------
    # Rule 1 (mask + map)
    # If numInstId == -1 AND strtInstInternalCode matches an instrument's strInstAladdin,
    # then numInstId := instrument.numInstID
    # -------------------------
    map_aladdin_to_id = dict(zip(dfi["strInstAladdin"], dfi["numInstID"]))
    r1_id = dfc["strtInstInternalCode"].map(map_aladdin_to_id)

    m1 = (dfc["numInstId"] == -1) & r1_id.notna()
    dfc.loc[m1, "numInstId"] = r1_id[m1].astype("Int64")

    # -------------------------
    # Rule 2 (mask + map)
    # If current instrument type âˆˆ {450,451,452} (by strInstAladdin),
    # and there exists a HEDGE instrument keyed by currency (codInstCurId),
    # replace several fields from that hedge instrument.
    # -------------------------

    # current row's instrument type by its strInstAladdin
    map_aladdin_to_type = dict(zip(dfi["strInstAladdin"], dfi["numInstTypeId"]))
    curr_type = dfc["strInstAladdin"].map(map_aladdin_to_type)

    # hedge instruments keyed by currency
    m_hedge = (
        (dfi["numInstTypeId"] == 504)
        & dfi["strInstName"].notna()
        & dfi["strInstName"].str.contains("HEDGE", na=False)
    )
    hedge = dfi.loc[m_hedge, ["strInstCurrCode", "numInstID", "strInstISINCode", "strInstAladdin"]]

    map_cur_to_id    = dict(zip(hedge["strInstCurrCode"], hedge["numInstID"]))
    map_cur_to_isin  = dict(zip(hedge["strInstCurrCode"], hedge["strInstISINCode"]))
    map_cur_to_aladd = dict(zip(hedge["strInstCurrCode"], hedge["strInstAladdin"]))

    h_id    = dfc["codInstCurId"].map(map_cur_to_id)
    h_isin  = dfc["codInstCurId"].map(map_cur_to_isin)
    h_aladd = dfc["codInstCurId"].map(map_cur_to_aladd)

    m2 = h_id.notna() & curr_type.isin([450, 451, 452])

    dfc.loc[m2, "numInstId"]           = h_id[m2].astype("Int64")
    dfc.loc[m2, "strInstISINCode"]     = h_isin[m2]
    dfc.loc[m2, "strInstSedolCode"]    = None
    dfc.loc[m2, "strInstCUSIPCode"]    = None
    dfc.loc[m2, "strtInstInternalCode"]= h_aladd[m2]
    dfc.loc[m2, "strInstAladdin"]      = h_aladd[m2]

    # Save
    out_path = save_parquet(dfc, child_folder="bench_data_brs", name="data_constituents_updated")
    del dfc, dfi, hedge
    gc.collect()
    logger.log.info("Update data constituents is done.")
    return out_path
